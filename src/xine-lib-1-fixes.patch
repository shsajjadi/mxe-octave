This file is part of mingw-cross-env.
See doc/index.html for further information.

Contains ad hoc patches for cross building.

From 10c6f4cb18b2b8e710a89ac36e360f3bb414a81c Mon Sep 17 00:00:00 2001
From: mingw-cross-env
Date: Sun, 13 Nov 2011 11:48:07 +0100
Subject: [PATCH 1/3] fix-install-def-file


diff --git a/src/xine-engine/Makefile.am b/src/xine-engine/Makefile.am
index 67ae63f..0f94abf 100644
--- a/src/xine-engine/Makefile.am
+++ b/src/xine-engine/Makefile.am
@@ -45,10 +45,10 @@ noinst_HEADERS = bswap.h ffmpeg_bswap.h xine_private.h
 
 if WIN32
 install-exec-local:
-	cp -p $(DEF_FILE) $(DESTDIR)$(libdir)
+	-cp -p $(DEF_FILE) $(DESTDIR)$(libdir)
 
 uninstall-local:
-	rm -f $(DEF_FILE)
+	-rm -f $(DESTDIR)$(libdir)/$(DEF_FILE)
 endif
 
 $(XINEUTILS_LIB):
diff --git a/src/xine-engine/Makefile.in b/src/xine-engine/Makefile.in
index 167a32b..0664e1f 100644
--- a/src/xine-engine/Makefile.in
+++ b/src/xine-engine/Makefile.in
@@ -905,10 +905,10 @@ $(LIBXINEPOSIX):
 	$(MAKE) -C $(top_builddir)/lib libxineposix.la
 
 @WIN32_TRUE@install-exec-local:
-@WIN32_TRUE@	cp -p $(DEF_FILE) $(DESTDIR)$(libdir)
+@WIN32_TRUE@	-cp -p $(DEF_FILE) $(DESTDIR)$(libdir)
 
 @WIN32_TRUE@uninstall-local:
-@WIN32_TRUE@	rm -f $(DEF_FILE)
+@WIN32_TRUE@	-rm -f $(DESTDIR)$(libdir)/$(DEF_FILE)
 
 $(XINEUTILS_LIB):
 	$(MAKE) -C $(top_builddir)/src/xine-utils libxineutils.la
-- 
1.7.7


From 536bda7f4b05f9a70bfbeca9578565a03b54c94e Mon Sep 17 00:00:00 2001
From: mingw-cross-env
Date: Sun, 13 Nov 2011 12:05:22 +0100
Subject: [PATCH 2/3] fake missing definitions for WIN32

Taken from:
https://bugs.xine-project.org/show_bug.cgi?id=433

diff --git a/src/audio_out/audio_file_out.c b/src/audio_out/audio_file_out.c
index 0895a2e..51f8855 100644
--- a/src/audio_out/audio_file_out.c
+++ b/src/audio_out/audio_file_out.c
@@ -40,6 +40,18 @@
 
 #define GAP_TOLERANCE        INT_MAX
 
+#ifdef WIN32
+#ifndef S_IWUSR
+#define S_IWUSR 0x0000
+#endif
+#ifndef S_IRGRP
+#define S_IRGRP 0x0000
+#endif
+#ifndef S_IROTH
+#define S_IROTH 0x0000
+#endif
+#endif
+
 /* Taken (hStudlyCapsAndAll) from sox's wavwritehdr */
 
 struct wavhdr {
@@ -116,7 +128,6 @@ static int ao_file_open(ao_driver_t *this_gen, uint32_t bits, uint32_t rate, int
 		this->fname = "xine-out.wav";
 
 	this->fd = xine_create_cloexec(this->fname, O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);
-
 	if (this->fd == -1) {
 		xprintf (this->xine, XINE_VERBOSITY_LOG, "audio_file_out: Failed to open file '%s': %s\n",
 			 this->fname, strerror(errno));
-- 
1.7.7


From 68609a4508116803346b4fd962f3ed3141c70316 Mon Sep 17 00:00:00 2001
From: mingw-cross-env
Date: Sun, 13 Nov 2011 13:45:21 +0100
Subject: [PATCH 3/3] force graphicsmagick over imagemagick


diff --git a/configure.ac b/configure.ac
index 6af7ef7..2682e39 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1419,21 +1419,12 @@ AC_ARG_WITH([imagemagick],
 	AS_HELP_STRING([--without-imagemagick], [Build without ImageMagick image decoder (or GraphicsMagick's compat layer)]))
 
 if test "x$with_imagemagick" != "xno"; then
-   PKG_CHECK_MODULES([WAND], [Wand], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
-   if test "x$have_imagemagick" = 'xno'; then
-      PKG_CHECK_MODULES([MAGICKWAND], [MagickWand], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
-      dnl Avoid $(WAND_FLAGS) $(MAGICKWAND_FLAGS) ...
-      WAND_CFLAGS="$MAGICKWAND_CFLAGS"
-      WAND_LIBS="$MAGICKWAND_LIBS"
-   fi
-   if test "x$have_imagemagick" = 'xno'; then
-      PKG_CHECK_MODULES([GRAPHICSMAGICK], [ImageMagick], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
-      PKG_CHECK_MODULES([GRAPHICSMAGICKWAND], [GraphicsMagickWand], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
-      dnl The following assignments are safe, since they include
-      dnl the flags for plain GraphicsMagick
-      WAND_CFLAGS="$GRAPHICSMAGICKWAND_CFLAGS"
-      WAND_LIBS="$GRAPHICSMAGICKWAND_LIBS"
-   fi
+   PKG_CHECK_MODULES([GRAPHICSMAGICK], [ImageMagick], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
+   PKG_CHECK_MODULES([GRAPHICSMAGICKWAND], [GraphicsMagickWand], [have_imagemagick=yes], [AC_MSG_RESULT([no]); have_imagemagick=no])
+   dnl The following assignments are safe, since they include
+   dnl the flags for plain GraphicsMagick
+   WAND_CFLAGS="$GRAPHICSMAGICKWAND_CFLAGS"
+   WAND_LIBS="$GRAPHICSMAGICKWAND_LIBS"
    if test "x$with_imagemagick" = "xyes" && test "x$have_imagemagick" = "xno"; then
       AC_MSG_ERROR([ImageMagick support requested, but neither Wand, MagickWand, nor GraphicsMagick were found])
    elif test "x$have_imagemagick" = "xyes"; then
-- 
1.7.7

